services:
  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zk-data:/var/lib/zookeeper/data
      - zk-txn-logs:/var/lib/zookeeper/log
    networks:
      - real-estate-network

  # Kafka Broker
  broker:
    container_name: broker
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      # Add health check settings
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - real-estate-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Schema Registry
  schema-registry:
    image: confluentinc/cp-schema-registry:7.4.0
    container_name: schema-registry
    depends_on:
      broker:
        condition: service_healthy
    ports:
      - "8082:8081"  # Changed to avoid conflict with Flink
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
      - real-estate-network

  # PostgreSQL for storing features and reference data
  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_DB: real_estate
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - real-estate-network

  # Redis for real-time feature serving
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - real-estate-network

  # Flink JobManager
  jobmanager:
    container_name: jobmanager
    image: flink:1.18-scala_2.12-java17
    ports:
      - "8081:8081"  
    command: jobmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        jobmanager.bind-host: 0.0.0.0
        rest.address: 0.0.0.0
        rest.bind-address: 0.0.0.0
        rest.port: 8081
        taskmanager.numberOfTaskSlots: 2
        parallelism.default: 1
        state.backend: filesystem
        state.checkpoints.dir: file:///tmp/flink-checkpoints
        state.savepoints.dir: file:///tmp/flink-savepoints
        jobmanager.memory.process.size: 1600m
        # Add restart strategy
        restart-strategy: fixed-delay
        restart-strategy.fixed-delay.attempts: 3
        restart-strategy.fixed-delay.delay: 10s
    volumes:
      - flink-checkpoints:/tmp/flink-checkpoints
      - flink-savepoints:/tmp/flink-savepoints
      - ./flink-jobs:/opt/flink/jobs
      - ./gcp-credentials.json:/opt/flink/gcp-credentials.json
      - ./beam-runners-flink-1.18-2.57.0.jar:/opt/flink/lib/beam-runners-flink-1.18-2.57.0.jar
      - ./beam-sdks-java-core-2.57.0.jar:/opt/flink/lib/beam-sdks-java-core-2.57.0.jar
    networks:
      - real-estate-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Flink TaskManager
  taskmanager:
    image: flink:1.18-scala_2.12-java17
    container_name: taskmanager
    depends_on:
      jobmanager:
        condition: service_healthy
    command: taskmanager
    scale: 1
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        taskmanager.bind-host: 0.0.0.0
        taskmanager.numberOfTaskSlots: 2
        parallelism.default: 1
        taskmanager.memory.process.size: 1728m
      - GOOGLE_APPLICATION_CREDENTIALS=/opt/flink/gcp-credentials.json
    volumes:
      - flink-checkpoints:/tmp/flink-checkpoints
      - flink-savepoints:/tmp/flink-savepoints
      - ./gcp-credentials.json:/opt/flink/gcp-credentials.json
      - ./beam-runners-flink-1.18-2.57.0.jar:/opt/flink/lib/beam-runners-flink-1.18-2.57.0.jar
      - ./beam-sdks-java-core-2.57.0.jar:/opt/flink/lib/beam-sdks-java-core-2.57.0.jar
    networks:
      - real-estate-network

  # Data Generator Service
  data-generator:
    build:
      context: ./data-generator
      dockerfile: Dockerfile
    container_name: data-generator
    depends_on:
      broker:
        condition: service_healthy
      postgres:
        condition: service_started
    environment:
      KAFKA_BOOTSTRAP_SERVERS: broker:29092
      POSTGRES_HOST: postgres
      POSTGRES_DB: real_estate
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - ./data-generator:/app
    networks:
      - real-estate-network

  # Grafana for monitoring
  grafana:
    image: grafana/grafana:10.0.0
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - real-estate-network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - real-estate-network
  
  # Kafka Topic Creator - Separate service to create topics
  kafka-setup:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka-setup
    depends_on:
      broker:
        condition: service_healthy
    networks:
      - real-estate-network
    command: >
      sh -c "
        echo 'Waiting for Kafka to be ready...' &&
        sleep 30 &&
        echo 'Creating Kafka topics...' &&
        kafka-topics --bootstrap-server broker:29092 --create --if-not-exists --topic property-listings --partitions 1 --replication-factor 1 &&
        kafka-topics --bootstrap-server broker:29092 --create --if-not-exists --topic price-changes --partitions 1 --replication-factor 1 &&
        kafka-topics --bootstrap-server broker:29092 --create --if-not-exists --topic property-interactions --partitions 1 --replication-factor 1 &&
        kafka-topics --bootstrap-server broker:29092 --create --if-not-exists --topic market-events --partitions 1 --replication-factor 1 &&
        echo 'Listing created topics:' &&
        kafka-topics --bootstrap-server broker:29092 --list &&
        echo 'Topics setup completed successfully'
      "

  # Job Submitter - Simplified version
  job-submitter:
    build:
      context: ./flink-job-submitter
    container_name: job-submitter
    depends_on:
      jobmanager:
        condition: service_healthy
      taskmanager:
        condition: service_started
      kafka-setup:
        condition: service_completed_successfully
    environment:
      - FLINK_JOBMANAGER_HOST=jobmanager
      - FLINK_JOBMANAGER_PORT=8081
      - FLINK_JOBMANAGER_URL=http://jobmanager:8081  # Add this
    volumes:
      - ./target:/jobs
      - ./logs:/opt/flink/log 
      - ./beam-sdks-java-core-2.57.0.jar:/opt/flink/lib/beam-sdks-java-core-2.57.0.jar
      - ./beam-sdks-java-io-kafka-2.57.0.jar:/opt/flink/lib/beam-sdks-java-io-kafka-2.57.0.jar
      - ./beam-sdks-java-io-google-cloud-platform-2.57.0.jar:/opt/flink/lib/beam-sdks-java-io-google-cloud-platform-2.57.0.jar
      - ./beam-runners-flink-1.18-2.57.0.jar:/opt/flink/lib/beam-runners-flink-1.18-2.57.0.jar
    networks:
      - real-estate-network
    # Add a startup delay
    command: >
      sh -c "
        echo 'Waiting for JobManager to be fully ready...' &&
        sleep 5 &&
        echo 'Starting job submission...' &&
        /opt/flink/bin/flink run -c com.example.beam.FlinkPropertyListingPipeline -d /jobs/property-listing-pipeline-bundled-1.0-SNAPSHOT.jar
      "

volumes:
  zk-data:
  zk-txn-logs:
  kafka-data:
  postgres-data:
  redis-data:
  flink-checkpoints:
  flink-savepoints:
  grafana-data:
  prometheus-data:

networks:
  real-estate-network:
    driver: bridge